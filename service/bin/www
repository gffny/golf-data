#!/usr/bin/env node

/**
 * Module dependencies.
 */

var makeApp = require('../server');
var loadConfig = require('../config');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

loadConfig().then(config => {
  const app = makeApp(config)

  /**
  * Create HTTP server.
  */

  var server = http.createServer(app);

  /**
  * Listen on provided port, on all network interfaces.
  */

  server.listen(config.port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Extend timeout for AWS ALB 502 issues
   */

  server.keepAliveTimeout = 65000;

  /**
  * Event listener for HTTP server "error" event.
  */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof config.port === 'string'
      ? 'Pipe ' + config.port
      : 'Port ' + config.port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
  * Event listener for HTTP server "listening" event.
  */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    console.log('Listening on ' + bind);
  }

})
